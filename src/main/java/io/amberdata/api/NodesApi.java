/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.amberdata.api;

import io.amberdata.model.Node1;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-08T19:03:46.332-05:00")

@Api(value = "nodes", description = "the nodes API")
public interface NodesApi {

    @ApiOperation(value = "", nickname = "nodesIdComingSoonGet", notes = "Fetch a single node", authorizations = {
        @Authorization(value = "AmberdataApiKey"),
        @Authorization(value = "AmberdataBlockchainId")
    }, tags={ "Nodes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns a single node"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/nodes/{id} (Coming Soon)",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Void> nodesIdComingSoonGet(@ApiParam(value = "The node id",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "nodesIdComingSoonPatch", notes = "Update a single node", authorizations = {
        @Authorization(value = "AmberdataApiKey"),
        @Authorization(value = "AmberdataBlockchainId")
    }, tags={ "Nodes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated a node"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/nodes/{id} (Coming Soon)",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> nodesIdComingSoonPatch(@ApiParam(value = "The node id",required=true) @PathVariable("id") String id,@ApiParam(value = "Specify some node object data"  )  @Valid @RequestBody Node1 node);

}
