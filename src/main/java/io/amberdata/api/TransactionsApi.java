/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.amberdata.api;

import io.amberdata.model.PendingTransactions;
import io.amberdata.model.PendingTransactions1;
import io.amberdata.model.Transaction;
import io.amberdata.model.Transaction1;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-08T19:03:46.332-05:00")

@Api(value = "transactions", description = "the transactions API")
public interface TransactionsApi {

    @ApiOperation(value = "", nickname = "transactionsIdDelete", notes = "Delete a single Transactions", authorizations = {
        @Authorization(value = "AmberdataApiKey"),
        @Authorization(value = "AmberdataBlockchainId")
    }, tags={ "Transactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted a Transaction"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/transactions/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> transactionsIdDelete(@ApiParam(value = "The transaction hash",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "transactionsIdGet", notes = "Fetch a single Transactions", authorizations = {
        @Authorization(value = "AmberdataApiKey"),
        @Authorization(value = "AmberdataBlockchainId")
    }, tags={ "Transactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returned a Transaction"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/transactions/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Void> transactionsIdGet(@ApiParam(value = "The transaction hash",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "transactionsIdPatch", notes = "Update a single Transactions", authorizations = {
        @Authorization(value = "AmberdataApiKey"),
        @Authorization(value = "AmberdataBlockchainId")
    }, tags={ "Transactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated a Transaction"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/transactions/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> transactionsIdPatch(@ApiParam(value = "The transaction hash",required=true) @PathVariable("id") String id,@ApiParam(value = "an example" ,required=true )  @Valid @RequestBody Transaction1 ERROR_UNKNOWN);


    @ApiOperation(value = "", nickname = "transactionsPendingIdDelete", notes = "Delete a single pending transaction", authorizations = {
        @Authorization(value = "AmberdataApiKey"),
        @Authorization(value = "AmberdataBlockchainId")
    }, tags={ "PendingTransactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Pending transaction deleted"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/transactions/pending/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> transactionsPendingIdDelete(@ApiParam(value = "Pending transaction hash",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "transactionsPendingIdGet", notes = "Fetch a single pending transaction", authorizations = {
        @Authorization(value = "AmberdataApiKey"),
        @Authorization(value = "AmberdataBlockchainId")
    }, tags={ "PendingTransactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Pending transaction returned"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/transactions/pending/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Void> transactionsPendingIdGet(@ApiParam(value = "Pending transaction hash",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "transactionsPendingIdPatch", notes = "Update a single pending transaction", authorizations = {
        @Authorization(value = "AmberdataApiKey"),
        @Authorization(value = "AmberdataBlockchainId")
    }, tags={ "PendingTransactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Pending transaction updated"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/transactions/pending/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> transactionsPendingIdPatch(@ApiParam(value = "Pending transaction hash",required=true) @PathVariable("id") String id,@ApiParam(value = "an example" ,required=true )  @Valid @RequestBody PendingTransactions1 pendingTransaction);


    @ApiOperation(value = "", nickname = "transactionsPendingPost", notes = "Add a new pending transaction or transactions", authorizations = {
        @Authorization(value = "AmberdataApiKey"),
        @Authorization(value = "AmberdataBlockchainId")
    }, tags={ "PendingTransactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Pending transaction created") })
    @RequestMapping(value = "/transactions/pending",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> transactionsPendingPost(@ApiParam(value = "an example" ,required=true )  @Valid @RequestBody PendingTransactions pendingTransaction);


    @ApiOperation(value = "", nickname = "transactionsPost", notes = "Add a new Transaction or Transactions", authorizations = {
        @Authorization(value = "AmberdataApiKey"),
        @Authorization(value = "AmberdataBlockchainId")
    }, tags={ "Transactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns success") })
    @RequestMapping(value = "/transactions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> transactionsPost(@ApiParam(value = "Specify an entire transaction object or an array of transaction objects" ,required=true )  @Valid @RequestBody Transaction transaction);

}
